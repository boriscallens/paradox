<Project InitialTargets="SiliconStudioParadoxCheckRequirements" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--Check requirements when running this build file -->
  <Target Name="SiliconStudioParadoxCheckRequirements">
    <Error Condition="'$(SiliconStudioPlatform)' == ''" Text="The property %24(SiliconStudioPlatform) must be defined by the project"/>

    <!-- If we compile without Visual Studio, still properly resolve platform if SolutionPath is given -->
    <MSBuild Projects="$(SolutionPath)"
             Condition="'$(BuildingInsideVisualStudio)' != 'true' and '$(BuildingSolutionFile)' != 'true' and '$(SolutionPath)' != '' and '$(SolutionPath)' != '*Undefined*'"
             Targets="GetSolutionConfigurationContents"
             Properties="Configuration=$(Configuration);Platform=$(SolutionPlatform)"
             ContinueOnError="$(ContinueOnError)">
      <Output TaskParameter="TargetOutputs" PropertyName="CurrentSolutionConfigurationContents"/>
    </MSBuild>
  </Target>

  <PropertyGroup>
    <!-- Defaults for CPU and GraphicsApi based on platform-->
    <SiliconStudioParadoxGraphicsApi Condition="'$(SiliconStudioParadoxGraphicsApi)' == '' and '$(SiliconStudioPlatform)' == 'Windows'">Direct3D11</SiliconStudioParadoxGraphicsApi>
    <SiliconStudioParadoxGraphicsApi Condition="'$(SiliconStudioParadoxGraphicsApi)' == '' and '$(SiliconStudioPlatform)' == 'WindowsStore'">Direct3D11</SiliconStudioParadoxGraphicsApi>
    <SiliconStudioParadoxGraphicsApi Condition="'$(SiliconStudioParadoxGraphicsApi)' == '' and '$(SiliconStudioPlatform)' == 'WindowsPhone'">Direct3D11</SiliconStudioParadoxGraphicsApi>
    <SiliconStudioParadoxGraphicsApi Condition="'$(SiliconStudioParadoxGraphicsApi)' == '' and '$(SiliconStudioPlatform)' == 'Windows10'">Direct3D11</SiliconStudioParadoxGraphicsApi>
    <SiliconStudioParadoxGraphicsApi Condition="'$(SiliconStudioParadoxGraphicsApi)' == '' and '$(SiliconStudioPlatform)' == 'Android'">OpenGLES</SiliconStudioParadoxGraphicsApi>
    <SiliconStudioParadoxGraphicsApi Condition="'$(SiliconStudioParadoxGraphicsApi)' == '' and '$(SiliconStudioPlatform)' == 'iOS'">OpenGLES</SiliconStudioParadoxGraphicsApi>

    <!--By default, turn on assembly processor-->
    <SiliconStudioAssemblyProcessor Condition="'$(SiliconStudioAssemblyProcessor)' == ''">true</SiliconStudioAssemblyProcessor>

    <SiliconStudioPlatformFullName Condition="'$(SiliconStudioPlatformFullName)' == ''">$(SiliconStudioPlatform)-$(SiliconStudioParadoxGraphicsApi)</SiliconStudioPlatformFullName>

    <SiliconStudioUserLibrariesPath Condition="'$(SiliconStudioCurrentPackagePath)' != ''">$([System.IO.Path]::GetDirectoryName($(SiliconStudioCurrentPackagePath)))\NativeLibs</SiliconStudioUserLibrariesPath>
  </PropertyGroup>

  <!-- 
  *****************************************************************************************************************************
  Package setup
  *****************************************************************************************************************************
  -->

  <!-- Setup global properties for this package -->
  <PropertyGroup>
    <SiliconStudioPackageParadox Condition="'$(SiliconStudioPackageParadox)' == ''">$(MSBuildThisFileDirectory)..</SiliconStudioPackageParadox>
    <!-- Resolve path (remove ".." elements), for better support on Xamarin iOS -->
    <SiliconStudioPackageParadox>$([System.IO.Path]::GetFullPath('$(SiliconStudioPackageParadox)'))</SiliconStudioPackageParadox>
    <SiliconStudioPackageParadoxBin Condition="'$(SiliconStudioPackageParadoxBin)' == ''">$(SiliconStudioPackageParadox)\Bin</SiliconStudioPackageParadoxBin>
    <SiliconStudioPackageParadoxSdkBin Condition="'$(SiliconStudioPackageParadoxSdkBin)' == ''">$(SiliconStudioPackageParadoxBin)\Windows-Direct3D11</SiliconStudioPackageParadoxSdkBin>
    <SiliconStudioPackageParadoxPlatformBin Condition="'$(SiliconStudioPackageParadoxPlatformBin)' == ''">$(SiliconStudioPackageParadoxBin)\$(SiliconStudioPlatformFullName)</SiliconStudioPackageParadoxPlatformBin>
  </PropertyGroup>

  <!---
  *****************************************************************************************************************************
  Assembly References
  *****************************************************************************************************************************
  -->
  <Choose>
    <When Condition="'$(SiliconStudioUnitTest)' != 'true'">
      <ItemGroup>
        <Reference Include="SiliconStudio.Core">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Core.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Core.IO">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Core.IO.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Core.Mathematics">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Core.Mathematics.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Core.MicroThreading">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Core.MicroThreading.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Core.Serialization">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Core.Serialization.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.Audio">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.Audio.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.Engine">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.Engine.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.Games">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.Games.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.Graphics">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.Graphics.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.Input">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.Input.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.Shaders">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.Shaders.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.UI">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.UI.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.Physics">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.Physics.dll</HintPath>
        </Reference>
        <Reference Include="SiliconStudio.Paradox.SpriteStudio.Runtime">
          <HintPath>$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.SpriteStudio.Runtime.dll</HintPath>
        </Reference>
      </ItemGroup>
    </When>
  </Choose>

  <!-- 
  *****************************************************************************************************************************
  Platform specific
  *****************************************************************************************************************************
  -->
  <PropertyGroup>
    <!--This variable can be overriden by a platform specific targets (in case the executable is located into an assembly dll )-->
    <SiliconStudioIsExecutable Condition=" '$(OutputType)' == 'Exe'">true</SiliconStudioIsExecutable>
    <SiliconStudioIsExecutable Condition=" '$(OutputType)' == 'WinExe'">true</SiliconStudioIsExecutable>
  </PropertyGroup>

  <!-- Include platform specific targets -->
  <Import Condition="Exists('$(MSBuildThisFileDirectory)\$(MSBuildThisFileName).$(SiliconStudioPlatform).targets')"
          Project="$(MSBuildThisFileDirectory)\$(MSBuildThisFileName).$(SiliconStudioPlatform).targets"/>
  
  <!-- 
  *****************************************************************************************************************************
  Assembly Processor
  *****************************************************************************************************************************
  -->
  <Target Name="SiliconStudioRunAssemblyProcessor" AfterTargets="CoreCompile" DependsOnTargets="ResolveProjectReferences" Condition=" '$(SiliconStudioAssemblyProcessor)' == 'true'">
    <WriteLinesToFile File="$(IntermediateOutputPath)ParadoxReferences.cache" Lines="@(ReferencePath)" Overwrite="true" />
    <PropertyGroup>
      <SiliconStudioAssemblyProcessorOptions Condition="'$(SiliconStudioAssemblyProcessorOptions)' == ''">--auto-notify-property --parameter-key --auto-module-initializer --serialization</SiliconStudioAssemblyProcessorOptions>
      <!-- If building user solutions (not unit tests), provide assembly processor with ProjectReferences paths so that they can be readded to assembly references for serialization module initializer (otherwise .exe don't have real reference on Game assemblies with auto load scene game) -->
      <SiliconStudioAssemblyProcessorOptions Condition="'$(SiliconStudioUnitTest)' != 'true'">$(SiliconStudioAssemblyProcessorOptions) @(_ResolvedProjectReferencePaths->'--add-reference=%22%(Identity)%22',' ')</SiliconStudioAssemblyProcessorOptions>
      <SiliconStudioAssemblyProcessorOptions Condition="'$(DocumentationFile)' != ''">$(SiliconStudioAssemblyProcessorOptions) --docfile="$(DocumentationFile)"</SiliconStudioAssemblyProcessorOptions>
      <!-- Physics and SpriteStudio assembly is actually hard coded/referenced here, remove once a better system is in place! -->
      <SiliconStudioAssemblyProcessorOptions>$(SiliconStudioAssemblyProcessorOptions) --add-reference="$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.Physics.dll" --add-reference="$(SiliconStudioPackageParadoxPlatformBin)\SiliconStudio.Paradox.SpriteStudio.Runtime.dll" --references-file="$(IntermediateOutputPath)ParadoxReferences.cache"</SiliconStudioAssemblyProcessorOptions>
      <SiliconStudioAssemblyProcessorCommand Condition="'$(SiliconStudioAssemblyProcessorCommand)' == ''">"$(SiliconStudioPackageParadoxSdkBin)\SiliconStudio.AssemblyProcessor.exe" --platform=$(SiliconStudioPlatform) --targetFramework=$(SiliconStudioNETFrameworkVersion) $(SiliconStudioAssemblyProcessorOptions) "$(IntermediateOutputPath)$(TargetName)$(TargetExt)"</SiliconStudioAssemblyProcessorCommand>
      <SiliconStudioAssemblyProcessorCommand Condition="'$(AssemblyOriginatorKeyFile)' != ''">$(SiliconStudioAssemblyProcessorCommand) --signkeyfile="$(AssemblyOriginatorKeyFile)" --delete-on-error</SiliconStudioAssemblyProcessorCommand>
    </PropertyGroup>
    
    <!-- Run assembly processor -->
    <Message Importance="High" Text="SiliconStudio AssemblyProcessor: $(SiliconStudioAssemblyProcessorCommand)"/>
    <Exec Command="$(SiliconStudioAssemblyProcessorCommand)">
      <Output TaskParameter="ExitCode" PropertyName="SiliconStudioAssemblyProcessorErrorCode"/>
    </Exec>
  </Target>

  <!-- 
  *****************************************************************************************************************************
  Compile Asset 
  *****************************************************************************************************************************
  -->
  <PropertyGroup Condition="'$(SiliconStudioCurrentPackagePath)' != ''">
    <ResolveReferencesDependsOn>
      SiliconStudioUpdateGraphicsPlatform;
      $(ResolveReferencesDependsOn);
    </ResolveReferencesDependsOn>
    <PrepareForRunDependsOn>
      $(PrepareForRunDependsOn);
      SiliconStudioCompileAsset;
    </PrepareForRunDependsOn>

    <!--asset BuildPath for all platforms (same as package)-->
    <SiliconStudioCompileAssetBuildPath Condition="'$(SiliconStudioCompileAssetBuildPath)' == ''">$([System.IO.Path]::GetDirectoryName($(SiliconStudioCurrentPackagePath)))\obj\data</SiliconStudioCompileAssetBuildPath>

    <!--asset OutputPath for Android-->
    <SiliconStudioCompileAssetOutputPath Condition="'$(SiliconStudioCompileAssetOutputPath)' == '' and '$(SiliconStudioPlatform)' == 'Android'">$(ProjectDir)$(BaseIntermediateOutputPath)$(SiliconStudioPlatform)\$(Configuration)\assets\data</SiliconStudioCompileAssetOutputPath>

    <!--asset OutputPath for other platforms -->
    <SiliconStudioCompileAssetOutputPath Condition="'$(SiliconStudioCompileAssetOutputPath)' == ''">$(TargetDir)data</SiliconStudioCompileAssetOutputPath>

    <SiliconStudioParadoxCompileAssetCommand Condition="'$(SiliconStudioParadoxCompileAssetCommand)' == ''">$(SiliconStudioPackageParadoxSdkBin)\SiliconStudio.Assets.CompilerApp.exe</SiliconStudioParadoxCompileAssetCommand>

    <SiliconStudioParadoxCompileAssetCommandProxy Condition="'$(DisableAssetCompilerExecServerProxy)' == 'true' Or '$(SiliconStudioParadoxDisableAssetCompilerExecServerProxy)' == 'true'">&quot;$(SiliconStudioParadoxCompileAssetCommand)&quot;</SiliconStudioParadoxCompileAssetCommandProxy>
    <SiliconStudioParadoxCompileAssetCommandProxy Condition="'$(SiliconStudioParadoxCompileAssetCommandProxy)' == ''">&quot;$(SiliconStudioPackageParadoxSdkBin)\SiliconStudio.Assets.CompilerClient.exe&quot;</SiliconStudioParadoxCompileAssetCommandProxy>
  </PropertyGroup>
  
  <Target Name="SiliconStudioGetGraphicsPlatform" Inputs="$(SiliconStudioCurrentPackagePath)" Outputs="$(IntermediateOutputPath)ParadoxGraphicsPlatform.cache" Condition="'$(SiliconStudioCurrentPackagePath)' != ''">
    <Error Condition="'$(SiliconStudioBuildProfile)' == ''" Text="The asset compiler is requiring the property (SiliconStudioBuildProfile) to be defined"/>
    <Error Condition="!Exists('$(SiliconStudioCurrentPackagePath)')" Text="Unable to find package decription from path [$(SiliconStudioCurrentPackagePath)]"/>
    
    <!-- Get the real graphics platform from .pdxpkg -->
    <Exec WorkingDirectory="$(TargetDir)" ConsoleToMSBuild="true"
          Command="&quot;$(SiliconStudioParadoxCompileAssetCommand)&quot; --platform=$(SiliconStudioPlatform) --profile=$(SiliconStudioBuildProfile) --package-file=&quot;$(SiliconStudioCurrentPackagePath)&quot; --get-graphics-platform">
      <Output TaskParameter="ConsoleOutput" PropertyName="SiliconStudioParadoxGraphicsApiComputed" />
    </Exec>
    
    <!-- Write result back to disk -->
    <WriteLinesToFile File="$(IntermediateOutputPath)ParadoxGraphicsPlatform.cache" Lines="$(SiliconStudioParadoxGraphicsApiComputed)" Overwrite="true" />
  </Target>
  
  <Target Name="SiliconStudioUpdateGraphicsPlatform" DependsOnTargets="SiliconStudioGetGraphicsPlatform" Condition="'$(SiliconStudioCurrentPackagePath)' != ''">
    <ReadLinesFromFile File="$(IntermediateOutputPath)ParadoxGraphicsPlatform.cache">
      <Output TaskParameter="Lines" PropertyName="SiliconStudioParadoxGraphicsApi"/>
    </ReadLinesFromFile>
    <Message Importance="Normal" Text="Detected Graphics Platform $(SiliconStudioParadoxGraphicsApi)"/>
    <PropertyGroup>
      <SiliconStudioPlatformFullNameOriginal>$(SiliconStudioPlatformFullName)</SiliconStudioPlatformFullNameOriginal>
      <SiliconStudioPlatformFullName>$(SiliconStudioPlatform)-$(SiliconStudioParadoxGraphicsApi)</SiliconStudioPlatformFullName>
    </PropertyGroup>
    
    <!-- Rewrite dependencies -->
    <ItemGroup>
      <CustomAdditionalCompileInputs Include="$(IntermediateOutputPath)ParadoxGraphicsPlatform.cache" />
      <Reference Condition="$([System.String]::new('%(Reference.HintPath)').Contains('$(SiliconStudioPlatformFullNameOriginal)'))">
        <HintPath>$([System.String]::new('%(Reference.HintPath)').Replace('$(SiliconStudioPlatformFullNameOriginal)','$(SiliconStudioPlatformFullName)'))</HintPath>
      </Reference>
    </ItemGroup>
  </Target>

  <!--Compile assets for all SiliconStudioPackage items and only for an executable-->
  <Target Name="SiliconStudioCompileAsset" DependsOnTargets="SiliconStudioUpdateGraphicsPlatform" Condition="'$(SiliconStudioCurrentPackagePath)' != '' and '$(SiliconStudioIsExecutable)' == 'true'">
    <!--Check that the package file actually exist-->
    <Error Condition="'$(SiliconStudioBuildProfile)' == ''" Text="The asset compiler is requiring the property (SiliconStudioBuildProfile) to be defined"/>
    <Error Condition="!Exists('$(SiliconStudioCurrentPackagePath)')" Text="Unable to find package decription from path [$(SiliconStudioCurrentPackagePath)]"/>
    <Exec WorkingDirectory="$(TargetDir)" 
          Command="$(SiliconStudioParadoxCompileAssetCommandProxy) $(SiliconStudioParadoxCompileAssetOptions) --disable-auto-compile --project-configuration &quot;$(Configuration)&quot; --platform=$(SiliconStudioPlatform) --graphics-platform=$(SiliconStudioParadoxGraphicsApi) --profile=$(SiliconStudioBuildProfile) --project-configuration=$(Configuration) --output-path=&quot;$(SiliconStudioCompileAssetOutputPath)&quot; --build-path=&quot;$(SiliconStudioCompileAssetBuildPath)&quot; --package-file=&quot;$(SiliconStudioCurrentPackagePath)&quot; --log-pipe=&quot;$(SiliconStudioBuildEngineLogPipeUrl)&quot;" />
    <!-- Android specific: include build output in _AndroidAssetsDest so that APK is regenerated -->
    <ItemGroup Condition="'$(SiliconStudioPlatform)' == 'Android'">
      <_AndroidAssetsDest Include="$(SiliconStudioCompileAssetOutputPath)\**\*.*" />
    </ItemGroup>
  </Target>

  <!-- Clean assets -->
  <Target Name="SiliconStudioCleanAsset" Condition="'$(SiliconStudioCurrentPackagePath)' != '' and '$(SiliconStudioIsExecutable)' == 'true'">
    <RemoveDir Condition="Exists('$(SiliconStudioCompileAssetBuildPath)')" ContinueOnError="true"  Directories="$(SiliconStudioCompileAssetBuildPath)"/>
    <RemoveDir Condition="Exists('$(SiliconStudioCompileAssetOutputPath)')" ContinueOnError="true"  Directories="$(SiliconStudioCompileAssetOutputPath)"/>
  </Target>
</Project>
<!-- Build file post-included by all Silicon Studio projects -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Add Default targets used by Msbuild for undefined Platforms / or when skipping compilation under a platform -->
  <Target Name="Build"/>
  <Target Name="Clean"/>
  <Target Name="ReBuild"/>
  <Target Name="Publish"/>
  <Target Name="GetTargetPath"/>
  <Target Name="GetNativeManifest"/>
  <Target Name="GetPackagingOutputs"/>
  
  <!-- Include platform dependent assembly when specified -->
  <Choose>
    <When Condition="'$(SiliconStudioPlatformDependent)' == 'true'">
      <Choose>
        <When Condition=" '$(SiliconStudioPlatform)' == 'Android'">
          <ItemGroup>
            <Reference Include="Mono.Android" />
          </ItemGroup>
        </When>
        <When Condition=" '$(SiliconStudioPlatform)' == 'iOS'">
          <ItemGroup>
            <Reference Include="Xamarin.iOS" />
          </ItemGroup>
        </When>
      </Choose>
    </When>
  </Choose>

  <!-- Setup VisualStudioVersion -->
  <PropertyGroup Condition=" '$(VisualStudioVersion)' == '' or '$(VisualStudioVersion)' &lt; '11.0' ">
    <VisualStudioVersion>11.0</VisualStudioVersion>
  </PropertyGroup>

  <!-- Setup compiler targets per platform / language -->
  <PropertyGroup>
    <!-- On Android, everything is library (even Exe) -->
    <OutputType Condition=" '$(SiliconStudioPlatform)' == 'Android' ">Library</OutputType>

    <SiliconStudioCompilerTargets>$(MSBuildThisFileDirectory)SiliconStudio.$(SiliconStudioPlatform).$(SiliconStudioProjectType).targets</SiliconStudioCompilerTargets>
    <SiliconStudioCompilerTargetsEnable Condition="!Exists('$(SiliconStudioCompilerTargets)')">false</SiliconStudioCompilerTargetsEnable>
    <SiliconStudioCompilerTargetsEnable Condition=" '$(SiliconStudioPlatform)' != 'Windows' and $(SiliconStudioWindowsOnly) == 'true'">false</SiliconStudioCompilerTargetsEnable>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(SiliconStudioGenerateDoc)' == 'true' ">
    <DocumentationFile>$(OutputPath)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <!-- Import the specific compiler targets for the selected platform/language -->
  <Import Condition="'$(SiliconStudioCompilerTargetsEnable)' != 'false'" Project="$(SiliconStudioCompilerTargets)" />
  
  <Target Name="RunSiliconStudioAssemblyProcessor" AfterTargets="CoreCompile" Condition=" '$(SiliconStudioAssemblyProcessor)' == 'true' and '$(SiliconStudioAssemblyProcessorPath)' != '' and '$(SiliconStudioAssemblyProcessorGlobal)' == 'true' and '$(SiliconStudioAssemblyProcessorOptions)' != '' ">
    <PropertyGroup Condition="'$(ParadoxUserBuild)' != 'true'">
      <!-- Add SiliconStudio.Core path to assembly search directory -->
      <SiliconStudioAssemblyProcessorOptions Condition="'$(SiliconStudioCoreAssemblyPath)' != ''">$(SiliconStudioAssemblyProcessorOptions) --assembly="$(SiliconStudioCoreAssemblyPath)"</SiliconStudioAssemblyProcessorOptions>
    </PropertyGroup>

    <WriteLinesToFile File="$(IntermediateOutputPath)ParadoxReferences.cache" Lines="@(ReferencePath)" Overwrite="true" />

    <!--Add platform and target framework to assembly processor options-->
    <PropertyGroup>
      <SiliconStudioAssemblyProcessorOptions>--platform=$(SiliconStudioPlatform) --targetFramework=$(TargetFrameworkVersion) $(SiliconStudioAssemblyProcessorOptions)</SiliconStudioAssemblyProcessorOptions>
      <SiliconStudioAssemblyProcessorOptions>$(SiliconStudioAssemblyProcessorOptions) --references-file="$(IntermediateOutputPath)ParadoxReferences.cache"</SiliconStudioAssemblyProcessorOptions>
      <SiliconStudioAssemblyProcessorOptions Condition="'$(AssemblyOriginatorKeyFile)' != ''">$(SiliconStudioAssemblyProcessorOptions) --signkeyfile="$(AssemblyOriginatorKeyFile)"</SiliconStudioAssemblyProcessorOptions>
      <SiliconStudioAssemblyProcessorOptions Condition="'$(DocumentationFile)' != ''">$(SiliconStudioAssemblyProcessorOptions) --docfile="$(DocumentationFile)"</SiliconStudioAssemblyProcessorOptions>
      <SiliconStudioAssemblyProcessorOptions>$(SiliconStudioAssemblyProcessorOptions) --Werror</SiliconStudioAssemblyProcessorOptions>
      <SiliconStudioAssemblyProcessorCommand>"$(SiliconStudioAssemblyProcessorPath)" $(SiliconStudioAssemblyProcessorOptions) "$(IntermediateOutputPath)$(TargetName)$(TargetExt)" --delete-output-on-error</SiliconStudioAssemblyProcessorCommand>
    </PropertyGroup>

    <!-- Run assembly processor -->
    <Message Importance="High" Text="SiliconStudio AssemblyProcessor: $(SiliconStudioAssemblyProcessorCommand)"/>
    <Exec Command="$(SiliconStudioAssemblyProcessorCommand)">
      <Output TaskParameter="ExitCode" PropertyName="SiliconStudioAssemblyProcessorErrorCode"/>
    </Exec>

    <!-- If assembly processor failed, delete file (to make sure non-processed assemblies are never used) and emit error -->
    <Delete Condition="$(SiliconStudioAssemblyProcessorErrorCode) != 0" Files="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"/>
    <Error Condition="$(SiliconStudioAssemblyProcessorErrorCode) != 0" Text='AssemblyProcessor command "$(SiliconStudioAssemblyProcessorCommand)" exited with error $(SiliconStudioAssemblyProcessorErrorCode)'/>
  </Target>

  <Target Name="SetPrivateOnProjectReferences" BeforeTargets="BeforeCompile">
    <!-- Automatically add Private on project references if they are already built in same folder as output folder -->
    <ItemGroup Condition="'$(OutputPath)' == '$(SiliconStudioOutputCommonDir)'">
      <ProjectReferenceNew Include="@(ProjectReference)">
        <Private>False</Private>
      </ProjectReferenceNew>
      <ProjectReference Remove="@(ProjectReference)"/>
      <ProjectReference Include="@(ProjectReferenceNew)"/>
    </ItemGroup>
  </Target>

  <!-- For MonoTouch executable projects, we add a target that set the variable MtouchExtraArgs -->
  <PropertyGroup Condition=" '$(SiliconStudioPlatform)' == 'iOS' and '$(OutputType)' == 'Exe'">
    <ResolveReferencesDependsOn>
      SetMtouchExtraArgs;
      $(ResolveReferencesDependsOn)
    </ResolveReferencesDependsOn>
  </PropertyGroup>
  
  <!-- For MonoTouch executable projects, we force native compilation with 'clang', and force linking with native siliconstudio.core library
       Note: this target can be redefined to add link other libraries -->
  <Target Name="SetMtouchExtraArgs" Condition=" '$(SiliconStudioPlatform)' == 'iOS' and '$(OutputType)' == 'Exe'">
    <PropertyGroup>
      <MtouchExtraArgs>$(MtouchExtraArgs) --compiler=clang -cxx -gcc_flags "-L%24{ProjectDir}/source -lstdc++ -lcore -force_load %24{ProjectDir}/source/libcore.a"</MtouchExtraArgs>
    </PropertyGroup>
  </Target>
  
  <!-- For MonoTouch executable projects, we add a target that copies the siliconstudio.core native library to link in the project root directory -->
  <PropertyGroup Condition=" '$(SiliconStudioPlatform)' == 'iOS' and '$(OutputType)' == 'Exe'">
    <BuildDependsOn>
        CopySiliconStudioNativeLibraries;
        $(BuildDependsOn);
    </BuildDependsOn>  
  </PropertyGroup>
  
  <!-- Copy the libcore.a and libfreetype.a libraries to the project root directory for future native link.
       Note: this target is redefined in References.targets for user projects -->
  <Target Name="CopySiliconStudioNativeLibraries" Condition=" '$(SiliconStudioPlatform)' == 'iOS' and '$(OutputType)' == 'Exe'">
    <Copy SourceFiles="$(SiliconStudioDependenciesDir)Core.Native\$(SiliconStudioPlatform)\libcore.a" DestinationFolder="$(ProjectDir)"/>
  </Target>
</Project>